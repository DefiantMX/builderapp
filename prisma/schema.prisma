// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  teamMembers   TeamMember[] // Link to TeamMembers if converted from one
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relation to User model
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations to other models
  tasks       Task[]
  plans       Plan[]
  events      Event[]
  bids        Bid[]
  takeoffs    Takeoff[]
  invoices    Invoice[]
  budget      Budget?
  documents   Document[]
  dailyLogs   DailyLog[]
  draws       Draw[]
  changeOrders ChangeOrder[]
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("Todo")
  dueDate     DateTime?
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Plan {
  id           String        @id @default(cuid())
  title        String
  description  String?
  fileUrl      String
  fileType     String
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
  measurements Measurement[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Measurement {
  id           String   @id @default(cuid())
  planId       String
  type         String   // "length" or "area"
  label        String
  value        Float
  unit         String   // "ft" or "sq ft"
  points       String   // JSON string of points array
  materialType String?  // Material type (e.g., "siding", "concrete", etc.)
  pricePerUnit Float?   // Price per unit (e.g., price per square foot)
  plan         Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      String    @default("Scheduled")
  percentComplete Int    @default(0)
  priority    Int       @default(0)
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([projectId])
}

model Bid {
  id              String    @id @default(cuid())
  title           String
  description     String?
  contractorName  String
  contractorEmail String
  amount          Float
  division        String    // Added division field
  status          String    @default("Pending") // Pending, Accepted, Rejected
  submissionDate  DateTime  @default(now())
  validUntil      DateTime?
  notes           String?
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Takeoff {
  id          String        @id @default(cuid())
  title       String
  description String?
  category    String        // e.g., "Concrete", "Electrical", "Plumbing"
  status      String        @default("In Progress") // In Progress, Completed, Verified
  items       TakeoffItem[]
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model TakeoffItem {
  id          String   @id @default(cuid())
  description String
  quantity    Float
  unit        String   // e.g., "SF", "LF", "EA", "CY"
  unitPrice   Float?
  notes       String?
  location    String?  // e.g., "First Floor", "Building A", "Room 101"
  takeoff     Takeoff  @relation(fields: [takeoffId], references: [id], onDelete: Cascade)
  takeoffId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Budget {
  id              String           @id @default(cuid())
  totalAmount     Float
  projectId       String           @unique
  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  divisionBudgets DivisionBudget[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model DivisionBudget {
  id          String   @id @default(cuid())
  division    String
  amount      Float
  description String?
  budgetId    String
  budget      Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Invoice {
  id          String   @id @default(cuid())
  division    String
  vendor      String
  amount      Float
  date        DateTime
  description String?
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  draws       Draw[]   @relation("DrawInvoices")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Document {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  fileType    String   @default("application/pdf")
  category    String   // e.g., "Contract", "Permit", "Insurance", etc.
  status      String   @default("pending") // pending, approved, rejected
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([projectId])
}

model DailyLog {
  id                String    @id @default(cuid())
  date              DateTime  @default(now())
  content           String
  author            String
  currentConditions String
  incidentReport    String?
  imageUrl          String?
  project           Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId         String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Draw {
  id          String    @id @default(cuid())
  drawNumber  Int
  date        DateTime
  amount      Float
  status      String    @default("Pending") // Pending, Approved, Paid
  description String?
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  invoices    Invoice[] @relation("DrawInvoices")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([projectId])
}

model ChangeOrder {
  id          String   @id @default(cuid())
  title       String
  description String?
  amount      Float
  status      String   @default("Pending") // Pending, Approved, Rejected
  date        DateTime @default(now())
  division    String
  reason      String?  // Reason for change order
  approvedBy  String?  // Who approved the change order
  approvedAt  DateTime?
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([projectId])
}

model MeetingMinute {
  id          String   @id @default(cuid())
  title       String
  date        DateTime @default(now())
  content     String
  createdBy   String
  actionItems ActionItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ActionItem {
  id            String   @id @default(cuid())
  description   String
  assignedTo    String?
  dueDate       DateTime?
  completed     Boolean  @default(false)
  meetingMinute MeetingMinute @relation(fields: [meetingMinuteId], references: [id], onDelete: Cascade)
  meetingMinuteId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model TeamMember {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  role        String   // Admin, Member, Guest, etc.
  joinedAt    DateTime @default(now())
  status      String   @default("active") // active, invited, pending, etc.
  inviteToken String?  @unique
  invitedAt   DateTime?
  permissions Json?    // e.g. ["projects:view", "finances:edit", ...]
  userId      String?  // Link to User account if converted
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  isConverted Boolean  @default(false) // Track if converted to user

  @@unique([userId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
